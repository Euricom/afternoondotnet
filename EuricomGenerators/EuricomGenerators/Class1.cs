using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using System.Text;
using System.Threading;

namespace DemoSourceGenerator;

[Generator]
public class SimpleEnumStringGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var enumDeclarations = context.SyntaxProvider
                               .CreateSyntaxProvider(static (node, _) => node is EnumDeclarationSyntax, static (ctx, _) => (EnumDeclarationSyntax)ctx.Node)
                               .Where(enumDecl => enumDecl is not null);
        var compilationAndEnums =
            context.CompilationProvider.Combine(enumDeclarations.Collect());

        string a = 1 switch { 0 => "", 1 => "1", 2 => "two", _ => "YOLO"};


        context.RegisterSourceOutput(compilationAndEnums, static (spc, source) => Execute(source.Left, source.Right, spc));
    }


    private const int DefaultStringBuilderCapacity = 1024;



    private static readonly string s_generatedCodeAttribute =
        $"global::System.CodeDom.Compiler.GeneratedCodeAttribute(" +
        $"\"{typeof(SimpleEnumStringGenerator).Assembly.GetName().Name}\", " +
        $"\"{typeof(SimpleEnumStringGenerator).Assembly.GetName().Version}\")";

    private static void Execute(Compilation compilation, ImmutableArray<EnumDeclarationSyntax> enums, SourceProductionContext context)
    {
        if (enums.IsDefaultOrEmpty)
        {
            return;
        }

        var distinctEnums = enums;//.Distinct();
        
        var builder = new StringBuilder(DefaultStringBuilderCapacity);
        builder.Clear();
        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#nullable enable");

        foreach (var @enum in distinctEnums)
        {
            context.CancellationToken.ThrowIfCancellationRequested();

            var enumSymbol = compilation.GetSemanticModel(@enum.SyntaxTree).GetDeclaredSymbol(@enum, context.CancellationToken);

            if (enumSymbol is null)
                break;

            builder.AppendLine($$"""
                using System;
                
                namespace {{string.Join(".", enumSymbol.ContainingNamespace.ToDisplayParts(SymbolDisplayFormat.FullyQualifiedFormat).Where(sdp => sdp.Kind == SymbolDisplayPartKind.NamespaceName))}}
                {
                    [{{s_generatedCodeAttribute}}]
                    public static class {{enumSymbol.Name}}Helper
                    {
                        public static string GetName(this {{enumSymbol.Name}} @enum)
                            => @enum switch
                                {
                """);

            foreach (var enumMember in @enum.Members)
            {
                builder.AppendLine($$"""
                                    {{enumSymbol.Name}}.{{enumMember.Identifier.Text}} => nameof({{enumSymbol.Name}}.{{enumMember.Identifier.Text}}),
                """);
            }

            builder.AppendLine($$"""
                                    _ => throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Enumeration {{enumSymbol.Name}} does not contain this value")
                                };
                
                        public static {{enumSymbol.Name}} Get{{enumSymbol.Name}}Value(string enumAsString)
                            => enumAsString switch
                                {
                """);

            foreach (var enumMember in @enum.Members)
            {
                builder.AppendLine($$"""
                                    nameof({{enumSymbol.Name}}.{{enumMember.Identifier.Text}}) => {{enumSymbol.Name}}.{{enumMember.Identifier.Text}},
                """);
            }

            builder.AppendLine($$"""
                                    _ => throw new ArgumentOutOfRangeException(nameof(enumAsString), enumAsString, "Enumeration {{enumSymbol.Name}} does not contain this value")
                                };
                    }
                }
                """);
        }

        context.AddSource("EnumHelpers.cs", builder.ToString());
    }
}
